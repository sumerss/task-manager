import { SyntaxToken } from './lexer/tokens';
import { PrefixExpressionNode, PrimaryExpressionNode, SyntaxNode } from './parser/nodes';
export declare function isAlphaOrUnderscore(char: string): boolean;
export declare function isDigit(char: string): boolean;
export declare function isHexChar(char: string): boolean;
export declare function isAlphaNumeric(char: string): boolean;
export declare function alternateLists<T, S>(firstList: T[], secondList: S[]): (T | S)[];
export declare function isOffsetWithinFullSpan(offset: number, nodeOrToken: SyntaxNode | SyntaxToken): boolean;
export declare function isOffsetWithinSpan(offset: number, nodeOrToken: SyntaxNode | SyntaxToken): boolean;
export declare function returnIfIsOffsetWithinFullSpan(offset: number, node?: SyntaxNode): SyntaxNode | undefined;
export declare function returnIfIsOffsetWithinFullSpan(offset: number, token?: SyntaxToken): SyntaxToken | undefined;
export declare function getNumberTextFromExpression(node: PrimaryExpressionNode | PrefixExpressionNode): string;
export declare function parseNumber(node: PrefixExpressionNode | PrimaryExpressionNode): number;
