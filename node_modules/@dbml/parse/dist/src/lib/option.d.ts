export type Option<T> = Some<T> | None<T>;
export declare class Some<T> {
    value: T;
    constructor(value: T);
    unwrap(): T;
    unwrap_or<S>(orValue: S): S | T;
    and_then<S>(callback: (_: T) => Option<S>): Option<S>;
    map<S>(callback: (_: T) => S): Option<S>;
    isOk(): boolean;
}
export declare class None<T> {
    value: undefined;
    unwrap(): T;
    unwrap_or<S>(orValue: S): S | T;
    and_then<S>(callback: (_: T) => Option<S>): Option<S>;
    map<S>(callback: (_: T) => S): Option<S>;
    isOk(): boolean;
}
