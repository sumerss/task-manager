import { ColumnSymbol } from '../analyzer/symbol/symbols';
import { LiteralNode, PrimaryExpressionNode, SyntaxNode } from '../parser/nodes';
import { ColumnType, RelationCardinality, Table, TokenPosition } from './types';
import { SyntaxTokenKind } from '../lexer/tokens';
import { default as Report } from '../report';
import { CompileError } from '../errors';
export declare function extractNamesFromRefOperand(operand: SyntaxNode, owner?: Table): {
    schemaName: string | null;
    tableName: string;
    fieldNames: string[];
};
export declare function getMultiplicities(op: string): [RelationCardinality, RelationCardinality];
export declare function getTokenPosition(node: SyntaxNode): TokenPosition;
export declare function getColumnSymbolsOfRefOperand(ref: SyntaxNode): ColumnSymbol[];
export declare function extractElementName(nameNode: SyntaxNode): {
    schemaName: string[];
    name: string;
};
export declare function extractColor(node: PrimaryExpressionNode & {
    expression: LiteralNode;
} & {
    literal: {
        kind: SyntaxTokenKind.COLOR_LITERAL;
    };
}): string;
export declare function getRefId(sym1: ColumnSymbol, sym2: ColumnSymbol): string;
export declare function getRefId(sym1: ColumnSymbol[], sym2: ColumnSymbol[]): string;
export declare function isSameEndpoint(sym1: ColumnSymbol, sym2: ColumnSymbol): boolean;
export declare function isSameEndpoint(sym1: ColumnSymbol[], sym2: ColumnSymbol[]): boolean;
export declare function normalizeNoteContent(content: string): string;
export declare function processDefaultValue(valueNode?: SyntaxNode): {
    type: 'string' | 'number' | 'boolean' | 'expression';
    value: string | number;
} | undefined;
export declare function processColumnType(typeNode: SyntaxNode): Report<ColumnType, CompileError>;
